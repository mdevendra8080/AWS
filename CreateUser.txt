https://futurenova2016.signin.aws.amazon.com/console

add user

AWS Management Console access

custom password - 

uncheck - User must create a new password at next sign-in

Add user to group - unexpected error -?

create user

create a new group - oraclegroup

attach policy - EC2FullAccess

create group


select oraclegroup - group actions

add users to group

user 40
-----------------------------

putty.exe - to start virtual machine
puttygen - converting from pem file to ppk
           putty will accept ppk file

EC2 instance - select region
Mumbai - 5


name value - oraclename(instance name)

configure security group - HTTP
review and launch

launch

create a new key pair - oraclekeypairname - download keypairname

launch instance

view instances

select instance  - get ipaddress 35.163.218.82
run puttygen

load - pem file
save private key

create ppk file


start putty
host name(or ip address) - ec2-user@35.163.218.82

saved session - ec2-user@35.163.218.82 -save

SSH -Auth -Private key file for authentication -select oracleppk file

sudo su



Git installation :
------------------

yum install git -y

java installation :
-------------------
yum install java-1.7.0-openjdk-devel -y
yum install java-1.8.0-openjdk-devel -y



java program on ec2 instance
----------------------------

mkdir test
cd test
nano Demo.java

ctrl+x and save - Yes then enter


S3-5 TB
-------
static web site
versioning 

create Bucket - orabucket -in small letters

selet orabucket

upload your application - home.html

Properties - static website hosting -enable website hosting
Index document - home.html - save
select application - actions - make public

endpoint - orabucket.s3-website-us-west-2.amazonaws.com


Dynamodb and java demo
----------------------

to install gradle on ec2
------------------------
cd /opt

wget https://services.gradle.org/distributions/gradle-3.1-bin.zip
 unzip gradle-3.1-bin.zip
ln -s gradle-3.1 gradle

 vim /etc/profile.d/gradle-env.sh

export GRADLE_HOME=/opt/gradle
export PATH=$PATH:$GRADLE_HOME/bin

esc :wq

cd /home
cd ec2-user/
 source /etc/profile.d/gradle-env.sh



git init 

git pull gradleproject

aws configure

IAM 
click on user - sanjay
security credentials - create access key - download csv file.

copy key value

gradle build
gradle run

service - dynamodb - default region -North Viginia
Tables - items - to view the records


Elastic BeanStalk
-----------------
task automation..


services
compute
Elastic Beanstalk

create new application

application name - 
web server environment

platform - tomcat
 configure more option
 security - modify
 
 key pair - oraclekeypairname
 I am instance profile - aws-elasticbeanstalk-ec2-role

 create environment

 after successful installation
 
 click on link to see home page 



SNS
---
services
mobile
create topic
topic name
display name

copy arn : e.g. => arn:aws:sns:sa-east-1:544864730040:topic123
create subscription
change protocol from http to email

endpoint - sanjay.degaonkar@capgemini.com


confirm subscription

refresh

publish to topic



Text messaging(SMS)
Send a text messages(SMS)
..

----------------------------------------------------------------EXAMPLE for Spring Cloud Cluster 
package com.example;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class CronServiceLeaderApplicationTests {

	@Test
	public void contextLoads() {
		// Simple lock API usage
		Lock lock = new ReentrantLock();
		boolean acquired = false;
		try {
			acquired = lock.tryLock(10, TimeUnit.SECONDS);
			if (acquired) {
				// Do something unique!
			}
		}
		catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			throw new RuntimeException("Interrupted");
		}
		finally {
			if (acquired) {
				lock.unlock();
			}
		}
	}

}
-----------
package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.Bean;
import org.springframework.integration.leader.Candidate;
import org.springframework.integration.leader.event.DefaultLeaderEventPublisher;
import org.springframework.integration.support.leader.LockRegistryLeaderInitiator;
import org.springframework.integration.support.locks.LockRegistry;

@SpringBootApplication
public class CronServiceLeaderApplication {

	@Bean
	public LockRegistryLeaderInitiator leaderInitiator(LockRegistry locks,
			Candidate candidate, ApplicationEventPublisher applicationEventPublisher) {
		LockRegistryLeaderInitiator initiator = new LockRegistryLeaderInitiator(locks,
				candidate);
		initiator.setLeaderEventPublisher(
				new DefaultLeaderEventPublisher(applicationEventPublisher));
		return initiator;
	}

	public static void main(String[] args) {
		SpringApplication.run(CronServiceLeaderApplication.class, args);
	}
}
-----------------------------------
package com.example;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.integration.support.locks.DefaultLockRegistry;

@Configuration
@Profile("!cloud")
class DefaultLockConfiguration {
	@Bean
	public DefaultLockRegistry defaultLockRegistry() {
		return new DefaultLockRegistry();
	}
}
--------------------------------
package com.example;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.springframework.http.HttpMethod;

@Entity
@SequenceGenerator(name="AGGREGATE_SEQUENCE", sequenceName="AGGREGATE_SEQUENCE", allocationSize=1)
@Table(name="Hook")
class Hook {

	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="AGGREGATE_SEQUENCE")
	@Column(name = "ID")
	private Long id;

	@SuppressWarnings("unused")
	private Hook() {
	}

	public Hook(HttpMethod method, String uri, String cron) {
		this.method = method.name();
		this.uri = uri;
		this.cron = cron;
	}

	@Column(name = "CRON")
	private String cron;

	@Column(name = "URI")
	private String uri;

	@Column(name = "METHOD")
	private String method = HttpMethod.POST.name();

	@Column(name = "VERSION")
	private long version = 0L;

	public long getVersion() {
		return version;
	}

	public void setVersion(long version) {
		this.version = version;
	}

	public Long getId() {
		return id;
	}

	public String getCron() {
		return cron;
	}

	public void setCron(String cron) {
		this.cron = cron;
	}

	public String getUri() {
		return uri;
	}

	public void setUri(String uri) {
		this.uri = uri;
	}

	public String getMethod() {
		return method;
	}

	public void setMethod(String method) {
		this.method = method;
	}

	@Override
	public String toString() {
		return method + " [id=" + id + ", uri=" + uri + "]";
	}

}
-----------------
package com.example;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.http.HttpMethod;
import org.springframework.integration.leader.Context;
import org.springframework.integration.leader.DefaultCandidate;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

@Component
class HookPinger extends DefaultCandidate implements CommandLineRunner {

	private static Logger logger = LoggerFactory.getLogger(HookPinger.class);

	private final HookRepository repository;
	private Scheduler scheduler;
	private RestTemplate restTemplate = new RestTemplate();
	private Set<Long> hooks = new HashSet<>();

	
	public HookPinger(HookRepository repository, Scheduler scheduler) {
		this.repository = repository;
		this.scheduler = scheduler;
	}

	@Override
	public void onGranted(Context ctx) {
		super.onGranted(ctx);
		scheduler.start();
	}

	@Override
	public void onRevoked(Context ctx) {
		scheduler.stop();
		super.onRevoked(ctx);
	}

	@Override
	public void run(String... args) throws Exception {
		if (repository.count() == 0) {
			repository.save(new Hook(HttpMethod.GET, "http://localhost:8080/health",
					"*/10 * * * * *"));
		}
		for (Hook hook : repository.findAll()) {
			if (!hooks.contains(hook.getId())) {
				hooks.add(hook.getId());
				scheduler.addTask(getTask(hook.getId()), hook.getCron());
			}
		}
	}

	private Runnable getTask(final Long id) {
		
		return new Runnable() {
		    public void run() {
		    	Hook hook = repository.findOne(id);
				long version = hook.getVersion();
				try {
					checkVersion(hook, version);
					logger.info("Pinging: " + hook);
					restTemplate.exchange(hook.getUri(), HttpMethod.valueOf(hook.getMethod()), null, Map.class);
					updateVersion(hook, version);
				}
				catch (Exception e) {
					// Don't care
					logger.info("Missed: " + e.getMessage());
				}
		    }
		};		
		
	}

	private void checkVersion(Hook hook, long version) {
		Hook check = repository.findOne(hook.getId());
		if (check.getVersion() != version) {
			throw new RuntimeException("Version does not match: expected " + version
					+ " but found " + check.getVersion());
		}
	}

	private void updateVersion(Hook hook, long version) {
		hook.setVersion(version + 1);
		repository.save(hook);
	}

}
----------------------------
package com.example;

import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;

@RepositoryRestResource
interface HookRepository extends PagingAndSortingRepository<Hook, Long> {
}
-------------------------------------
package com.example;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.integration.jdbc.lock.JdbcLockRegistry;
import org.springframework.integration.jdbc.lock.LockRepository;

@Configuration
@Profile("cloud")
@ComponentScan(basePackageClasses = LockRepository.class)
class JdbcLockConfiguration {

	@Bean
	public JdbcLockRegistry jdbcLockRegistry(LockRepository lockRepository) {
		return new JdbcLockRegistry(lockRepository);
	}

}
-----------------------------
package com.example;

import java.io.Closeable;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.scheduling.annotation.SchedulingConfigurer;
import org.springframework.scheduling.config.CronTask;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;
import org.springframework.stereotype.Component;

@Component
class Scheduler implements SchedulingConfigurer, Closeable {

	private volatile ScheduledTaskRegistrar taskRegistrar;
	private volatile ExecutorService pool;
	private volatile boolean running = false;

	@Override
	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
		this.taskRegistrar = taskRegistrar;
	}

	public void addTask(Runnable task, String expression) {
		if (running) {
			taskRegistrar.scheduleCronTask(new CronTask(task, expression));
		}
		else {
			taskRegistrar.addCronTask(new CronTask(task, expression));
		}
	}

	public void start() {
		running = true;
		if (taskRegistrar != null) {
			pool = Executors.newScheduledThreadPool(10);
			taskRegistrar.setScheduler(pool);
			taskRegistrar.afterPropertiesSet();
		}
	}

	public void stop() {
		if (taskRegistrar != null) {
			taskRegistrar.destroy();
			pool.shutdown();
			pool = null;
		}
		running = false;
	}

	@Override
	public void close() throws IOException {
		stop();
	}

}
----------------------------------------
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
#spring.datasource.url=jdbc:mysql://localhost/test
spring.datasource.username=alert
spring.datasource.password=alert
spring.datasource.schema=classpath:org/springframework/integration/jdbc/schema-oracle10g.sql
#spring.datasource.schema=classpath:org/springframework/integration/jdbc/schema-mysql.sql
spring.datasource.continue-on-error=true
spring.profiles.active=cloud
logging.level.org.springframework.jdbc=debug
server.port=9004

-------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>cron-service-leader</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>cron-service-leader</name>
	<description>Demo</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.2.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.integration/spring-integration-jdbc -->
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-jdbc</artifactId>
		</dependency>

		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-commons-core -->
<!-- 		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-commons-core</artifactId>
			<version>1.4.1.RELEASE</version>
		</dependency> -->

 <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-beans</artifactId>
  </dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.integration/spring-integration-core -->
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-core</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-integration</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>alert-nexus</id>
			<name>alert-nexus</name>
			<url>http://omwdcsnrs01:8081/nexus/content/groups/alert_group</url>
		</repository>



	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>alert-nexus</id>
			<name>alert-nexus</name>
			<url>http://omwdcsnrs01:8081/nexus/content/groups/alert_group</url>
		</pluginRepository>

	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Brixton.SR4</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>




















